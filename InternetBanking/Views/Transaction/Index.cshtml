@using InternetBanking.Core.Application.ViewModels.Transactions
@using InternetBanking.Core.Domain.Enums
@model SaveTransactionViewModel

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header bg-primary text-white">
            <h5 class="modal-title">Transferencia entre Cuentas</h5>
        </div>
        <div class="modal-body">
            <!-- Formulario de Transferencia -->
            <form id="transferForm" method="post" action="@Url.Action("Transaction", "Transaction")">

                <!-- Cuenta de Origen -->
                <div class="mb-4">
                    <label asp-for="SourceAccount" class="form-label font-weight-bold">Cuenta de Origen</label>
                    <select asp-for="SourceAccount" class="form-select form-select-lg" required>
                        <option value="" disabled selected>Seleccione una cuenta de origen</option>
                        @foreach (var account in Model.accounts)
                        {
                            <option value="@account.Id">
                                @account.AccountNumber - Saldo: @account.CurrentBalance.ToString("C", new System.Globalization.CultureInfo("es-DO"))
                            </option>
                        }
                    </select>
                    <span asp-validation-for="SourceAccount" class="text-danger"></span>
                </div>

                <!-- Cuenta de Destino -->
                <div class="mb-4">
                    <label asp-for="DestinationAccount" class="form-label font-weight-bold">Cuenta de Destino</label>
                    <select asp-for="DestinationAccount" class="form-select form-select-lg" required>
                        <option value="" disabled selected>Seleccione una cuenta de destino</option>
                        @foreach (var account in Model.accounts)
                        {
                            <option value="@account.Id">
                                @account.AccountNumber - Saldo: @account.CurrentBalance.ToString("C", new System.Globalization.CultureInfo("es-DO"))
                            </option>
                        }
                    </select>
                    <span asp-validation-for="DestinationAccount" class="text-danger"></span>
                </div>

                <!-- Monto a Transferir -->
                <div class="mb-4">
                    <label asp-for="Amount" class="form-label font-weight-bold">Monto a Transferir</label>
                    <input asp-for="Amount" class="form-control form-control-lg" placeholder="Ingrese el monto" type="number" step="0.01" min="0.01" required />
                    <span asp-validation-for="Amount" class="text-danger"></span>
                </div>

                <!-- Botón para abrir el modal de confirmación -->
                <div class="modal-footer d-flex justify-content-between">
                    <button type="button" class="btn btn-primary" onclick="showConfirmationModal()">Realizar Transferencia</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal de Confirmación -->
<div id="confirmationModal" class="modal" tabindex="-1" role="dialog" style="display: none;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmación de Transferencia</h5>
                <button type="button" class="close" onclick="document.getElementById('confirmationModal').style.display='none'">&times;</button>
            </div>
            <div class="modal-body">
                <p>¿Deseas confirmar la transferencia entre cuentas?</p>
                <p><strong>Cuenta Origen:</strong> <span id="sourceAccountInfo"></span></p>
                <p><strong>Cuenta Destino:</strong> <span id="destinationAccountInfo"></span></p>
                <p><strong>Monto:</strong> <span id="confirmationAmount"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="document.getElementById('confirmationModal').style.display='none'">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="confirmTransfer()">Confirmar Transferencia</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Scripts de Validación de ASP.NET Core -->
    <partial name="_ValidationScriptsPartial" />

    <!-- Validación y Confirmación de Transferencia -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const amountInput = document.querySelector('input[name="Amount"]');
            const sourceAccountSelect = document.querySelector('select[name="SourceAccount"]');
            const destinationAccountSelect = document.querySelector('select[name="DestinationAccount"]');

            amountInput.addEventListener("input", function () {
                if (this.value < 0) {
                    this.value = "";  // Limpia el campo si el valor es negativo
                    alert("El monto debe ser un valor positivo.");
                }
            });

            function showAlert(message) {
                alert(message);
            }

            window.showConfirmationModal = function () {
                const sourceAccount = sourceAccountSelect.value;
                const destinationAccount = destinationAccountSelect.value;
                const amount = amountInput.value;

                if (!sourceAccount) {
                    showAlert("Por favor, seleccione una cuenta de origen.");
                    return;
                }
                if (!destinationAccount) {
                    showAlert("Por favor, seleccione una cuenta de destino.");
                    return;
                }
                if (sourceAccount === destinationAccount) {
                    showAlert("La cuenta de origen y destino no pueden ser la misma.");
                    return;
                }
                if (!amount || amount <= 0) {
                    showAlert("Por favor, ingrese un monto válido.");
                    return;
                }

                // Validar saldo en la cuenta de origen
                const selectedSourceAccount = Model.accounts.find(acc => acc.Id === sourceAccount);
                if (selectedSourceAccount && parseFloat(amount) > selectedSourceAccount.CurrentBalance) {
                    showAlert("Saldo insuficiente en la cuenta de origen.");
                    return;
                }

                // Mostrar información de confirmación
                document.getElementById("sourceAccountInfo").innerText = selectedSourceAccount.AccountNumber;
                const selectedDestinationAccount = Model.accounts.find(acc => acc.Id === destinationAccount);
                document.getElementById("destinationAccountInfo").innerText = selectedDestinationAccount.AccountNumber;
                document.getElementById("confirmationAmount").innerText = amount;
                document.getElementById("confirmationModal").style.display = "block";
            }

            window.confirmTransfer = function () {
                document.getElementById("transferForm").submit();
            }
        });
    </script>
}
